require("dotenv").config();
const express = require("express");
const cors = require("cors");
const axios = require("axios");
const vulnerabilityRouter = express.Router();
const vulnerabilityController = require("../controllers/vulnerabilityController");

const AIKIDO_API_KEY = process.env.AIKIDO_API_KEY;

// vulnerabilityRouter.use(cors({ origin: "http://localhost:5173", methods: ["GET", "POST"] }));
vulnerabilityRouter.use(cors());
vulnerabilityRouter.use(express.json());

const fetchScanResults = async (target) => {
  try {
    const response = await axios.post(
      "https://app.aikido.dev/api/public/v1/workspace/scan-url",
      { url: target },
      {
        headers: {
          Authorization: `Bearer ${AIKIDO_API_KEY}`,
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      }
    );

    const vulnerabilities = response.data.vulnerabilities || [];
    return vulnerabilities;
  } catch (error) {
    console.error("Scan Error:", error.response?.data || error.message);
    throw new Error("Failed to fetch scan results");
  }
};

vulnerabilityRouter.post("/scan", async (req, res) => {
  const { target } = req.body;

  if (!target) {
    return res.status(400).json({ error: "Target URL is required" });
  }

  try {
    // Replace this with your actual Aikido API call
    const vulnerabilities = [
      { name: "Cross-Site Scripting (XSS)", severity: "High" },
      { name: "Insecure Cookies", severity: "Medium" },
    ];

    res.status(200).json({ scanResults: vulnerabilities });
  } catch (error) {
    console.error("Error in /scan endpoint:", error.message);
    res.status(500).json({ error: "Failed to fetch scan results" });
  }
});

module.exports = vulnerabilityRouter;