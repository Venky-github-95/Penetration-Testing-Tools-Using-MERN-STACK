require("dotenv").config();
const express = require("express");
const cors = require("cors");
const axios = require("axios");
const { JSDOM } = require("jsdom");
const vulnerabilityrouter = express.Router();
const vulnerabilityController = require("../controllers/vulnerabilityController");

const AIKIDO_API_KEY = process.env.AIKIDO_API_KEY;

vulnerabilityrouter.use(cors({ origin: "http://localhost:5173", methods: ["GET", "POST"] }));
vulnerabilityrouter.use(express.json());
vulnerabilityrouter.use(express.urlencoded({ extended: true }));

const fetchScanResults = async (target) => {
  try {
    console.log("Scanning Target:", target);

    const response = await axios.post(
      "https://app.aikido.dev/api/public/v1/workspace/scan-url",
      { url: target },
      {
        headers: {
          Authorization: `Bearer ${AIKIDO_API_KEY}`,
          Accept: "application/json",
          "Content-Type": "application/json",
        },
      }
    );

    const vulnerabilities = response.data.vulnerabilities || [];
    console.log("Extracted Vulnerabilities:", vulnerabilities);

    return vulnerabilities;
  } catch (error) {
    console.error("Scan Error:", error.response?.data || error.message);
    throw new Error("Failed to fetch scan results");
  }
};

vulnerabilityrouter.post("/scan", async (req, res) => {
  const { target } = req.body;

  if (!target) {
    return res.status(400).json({ error: "Target URL is required" });
  }

  try {
    console.log("Fetching scan results for:", target);
    const vulnerabilities = await fetchScanResults(target);

    const overallRisk = `${Math.round((vulnerabilities.length / 100) * 100)}%`;

    const scanData = {
      target,
      scanResults: vulnerabilities,
      riskPercentage: overallRisk,
    };

    console.log("Saving Scan Data:", scanData);
    const savedScan = await vulnerabilityController.createScan(scanData);

    res.status(201).json({ success: true, scanResults: savedScan });
  } catch (error) {
    console.error("Error storing scan data:", error.message);
    res.status(500).json({ error: "Failed to store scan data" });
  }
});

vulnerabilityrouter.get("/scans", vulnerabilityController.getAllScans);
vulnerabilityrouter.get("/scans/:id", vulnerabilityController.getScanById);

module.exports = vulnerabilityrouter;
